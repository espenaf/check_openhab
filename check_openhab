#!/usr/bin/python3

import datetime
import json
import re
import sys
import urllib.request, urllib.parse, urllib.error
import urllib.request, urllib.error, urllib.parse

import dateutil.parser
import dateutil.relativedelta

from optparse import OptionParser, OptionGroup

RC_OK   = 0
RC_WARN = 1
RC_CRIT = 2
RC_UNKN = 3

options_epilog = """The warn, crit, warn-time, and crit-time parameters
take a pair of values separated by a colon.  Either side of the colon may
be empty, which implies no threshold in that direction.  e.g. "1:2"
indicates that the acceptable values for the check range from 1 to 2,
inclusive.  ":5" gives an upper threshold of 5 and no lower threshold.

The time-based thresholds use ISO 8601 formatting, with no readability
characters ("-" or ":").  Time-based thresholds can either be absolute
dates or time periods (which start with the character "P").  Time periods
are relative to the time the check is run."""
parser = OptionParser(epilog=options_epilog)
parser.add_option('-I', '--item', help='The item to check.  Either this or --thing is required.')
parser.add_option('-T', '--thing', help='The thing to check. Will check thing''s status. Either this or --item is required.')
parser.add_option('-H', '--hostname', default='localhost', help='Hostname of the OpenHAB instance.  Defaults to localhost.')
parser.add_option('-p', '--port', type='int', default=8080, help='Port number of the OpenHAB instance.  Defaults to 8080.')
parser.add_option('-S', '--ssl', action='store_true', help='Use SSL when connecting.  Default is not to use SSL.')
parser.add_option('-a', '--authorization', help='username:password pair to use when connecting.')
parser.add_option('-u', '--base-url', default='/rest', help='Base path for the REST API.  Defaults to /rest.')
parser.add_option('-G', '--group', action='store_true', help='This item is a group; apply the checks to each group member individually. Cannot be used with --thing.')
parser.add_option('-U', '--uninitialized-status', choices=('OK', 'WARNING', 'CRITICAL', 'UNKNOWN'), default='UNKNOWN', help='The status that should be returned if the item\'s state is "Uninitialized".  Defaults to UNKNOWN.')
parser.add_option('-v', '--verbose', action='store_true')

itemOptionsGroup = OptionGroup(parser, "Item Options", "These options will only be used for item and group checks.")
itemOptionsGroup.add_option('-w', '--warn', help='low:high pair of integers to set thresholds for a WARNING status.  Either integer may be absent to indicate no threshold in that direction. Only used for item/group checks.')
itemOptionsGroup.add_option('-c', '--crit', help='low:high pair of integers to set thresholds for a CRITICAL status.  Either integer may be absent to indicate no threshold in that direction. Only used for item/group checks.')
itemOptionsGroup.add_option('-r', '--regex', help='Regular expression to search for in string values.  Returns CRITICAL if pattern is not found. Only used for ')
itemOptionsGroup.add_option(      '--invert-regex', action='store_true', help='Reverses the return values for the --regex parameter: CRITICAL if pattern *is* found, OK if it isn\'t.')
itemOptionsGroup.add_option(      '--warn-time', help='low:high pair of timestamps or time periods which constitute WARNING thresholds for DateTime items.  See below for information on formatting.')
itemOptionsGroup.add_option(      '--crit-time', help='low:high pair of timestamps or time periods which constitute CRITICAL thresholds for DateTime items.  See below for information on formatting.')
parser.add_option_group(itemOptionsGroup)

iso8601_duration_re = \
    re.compile(r"""^P(?:(?:(\d+)Y)?
                        (?:(\d+)M)?
                        (?:(\d+)D)?
                        (?:T(?:(\d+)H)?
                            (?:(\d+)M)?
                            (?:(\d+)S)?)?
                        |
                        (\d+)W)$""", re.X)

def parse_iso8601(value, forward):
    period_match = iso8601_duration_re.search(value)
    if period_match:
        multiplier = 1 if forward else -1
        years, months, days, hours, minutes, seconds, weeks = [ int(i) * multiplier if i else 0 for i in period_match.groups() ]
        return datetime.datetime.now() + dateutil.relativedelta.relativedelta(years=years, months=months, days=days, hours=hours, minutes=minutes, seconds=seconds, weeks=weeks)
    return dateutil.parser.parse(value, default=datetime.datetime(1, 1, 1))

def split_threshold(value, level, convert):
    if value is None:
        return (None, None)
    items = value.split(':')
    if len(items) != 2:
        print('Malformed %s value: %s' % (level, value))
        sys.exit(RC_UNKN)
    try:
        return [ None if i == '' else convert(i, f) for i, f in zip(items, (False, True)) ]
    except:
        print('Invalid value passed as %s parameter: %s' % (level, value))
        sys.exit(RC_UNKN)

def check_limits(state, low, high, name, return_code):
    if low is not None and state <= low:
        return (return_code, '%s state (%s) is less than %s' % (name, state, low))
    elif high is not None and high <= state:
        return (return_code, '%s state (%s) is greater than %s' % (name, state, high))
    else:
        return (None, None)

class Thresholds:
    def __init__(self, options):
        self.numeric_limits = options.warn is not None or options.crit is not None
        if self.numeric_limits:
            self.warn_low, self.warn_high = split_threshold(options.warn, 'warn', lambda i, f: float(i))
            self.crit_low, self.crit_high = split_threshold(options.crit, 'crit', lambda i, f: float(i))
            if options.verbose:
                print('# numeric thresholds: %s << %s < x > %s >> %s' % (self.crit_low, self.warn_low, self.warn_high, self.crit_high), file=sys.stderr)

        self.time_limits = options.warn_time is not None or options.crit_time is not None
        if self.time_limits:
            self.warn_time_low, self.warn_time_high = split_threshold(options.warn_time, 'warn-time', lambda i, f: parse_iso8601(i, f))
            self.crit_time_low, self.crit_time_high = split_threshold(options.crit_time, 'crit-time', lambda i, f: parse_iso8601(i, f))
            if options.verbose:
                print('# time thresholds: %s << %s < x > %s >> %s' % (self.crit_time_low, self.warn_time_low, self.warn_time_high, self.crit_time_high), file=sys.stderr)

        self.regex_limit = options.regex is not None
        if self.regex_limit:
            self.invert_regex = options.invert_regex
            try:
                self.compiled_regex = re.compile(options.regex)
            except:
                print('Unable to compile regex:', options.regex)
                sys.exit(RC_UNKN)

    def check(self, state, name):
        if self.numeric_limits:
            try:
                state_float = float(state)
            except ValueError:
                return (RC_UNKN, 'Numeric thresholds given for non-numeric state: "%s"' % state)
            rc, message = check_limits(state_float, self.crit_low, self.crit_high, name, RC_CRIT)
            if rc is not None:
                return (rc, message, perfdata)
            rc, message = check_limits(state_float, self.warn_low, self.warn_high, name, RC_CRIT)
            if rc is not None:
                return (rc, message, perfdata)

        if self.time_limits:
            try:
                state_time = dateutil.parser.parse(state)
            except ValueError:
                return (RC_UNKN, 'Time thresholds given for non-time state: "%s"' % state)
            rc, message = check_limits(state_time, self.crit_time_low, self.crit_time_high, name, RC_CRIT)
            if rc is not None:
                return (rc, message)
            rc, message = check_limits(state_time, self.warn_time_low, self.warn_time_high, name, RC_WARN)
            if rc is not None:
                return (rc, message)

        if self.regex_limit:
            if self.invert_regex:
                rc_match, rc_nomatch = RC_CRIT, RC_OK
            else:
                rc_match, rc_nomatch = RC_OK, RC_CRIT
            if self.compiled_regex.search(state):
                return (rc_match, '%s regex matched state: %s' % (name, state))
            else:
                return (rc_nomatch, '%s regex did not match state: %s' % (name, state))
        return (RC_OK, '%s state within bounds: %s' % (name, state))


def check_item(object_json, thresholds, options):
    """Uses the values in OPTIONS to check on the status of ITEM.  Returns a
    tuple: (RETURN_CODE, MESSAGE)"""

    if object_json['state'] in ('Uninitialized', 'Undefined'):
        if options.uninitialized_status == 'OK':
            rc = RC_OK
        elif options.uninitialized_status == 'WARNING':
            rc = RC_WARN
        elif options.uninitialized_status == 'CRITICAL':
            rc = RC_CRIT
        elif options.uninitialized_status == 'UNKNOWN':
            rc = RC_UNKN
        else:
            rc = RC_UNKN
        return (rc, '%s is uninitialized.' % object_json['name'])

    return thresholds.check(object_json['state'], object_json['name'])

def check_thing(object_json, options):

    status = object_json['statusInfo']['status']
    if status == 'ONLINE':
        rc = RC_OK
    elif status == 'UNKONWN':
        rc = RC_UNKN
    else:
        rc = RC_CRIT
    return (rc, '%s is %s.' % (object_json['UID'], status))

def check_group(group_json, thresholds, options):
    final_rc = RC_OK
    final_messages = []
    perfdata = ""
    for i in group_json['members']:
        if i['type'] == 'GroupItem':
            rc, messages, perfdata = check_group(fetch_object(i['link'], options), thresholds, options)
            final_messages += messages
            perfdata += perfdata
        else:
            rc, message = check_item(i, thresholds, options)
            try:
                state_float = float(i["state"])
                perfdata += ("'%s'=%s " % (i["name"], i["state"]))
            except:
                # state isn't numeric, so don't add perfdata
                pass

            if rc != RC_OK:
                final_messages.append(message)
        final_rc = max(final_rc, rc)
    return (final_rc, final_messages, perfdata)

def fetch_object(item_url, options):
    if options.verbose:
        print('# %s' % item_url, file=sys.stderr)

    password_manager = urllib.request.HTTPPasswordMgrWithDefaultRealm()
    if options.authorization is not None:
        auth_params = options.authorization.split(':')
        if len(auth_params) != 2:
            print('Authorization parameters not in "username:password" format.')
            sys.exit(RC_UNKN)
        password_manager.add_password(None, item_url, auth_params[0], auth_params[1])
    auth_handler = urllib.request.HTTPBasicAuthHandler(password_manager)
    url_opener = urllib.request.build_opener(auth_handler)
    urllib.request.install_opener(url_opener)

    item_request = urllib.request.Request(item_url)
    item_request.add_header('Accept', 'application/json')
    try:
        item_raw = urllib.request.urlopen(item_request)
    except urllib.error.HTTPError as e:
        if e.code == 404:
            print('Item "%s" does not exist.' % item_url)
            sys.exit(RC_UNKN)
        print('Exception fetching item data:', e)
        sys.exit(RC_UNKN)
    except Exception as e:
        print('Exception fetching item data:', e)
        sys.exit(RC_UNKN)

    object_json = json.load(item_raw)
    if options.verbose:
        print('# %s' % json.dumps(object_json))
    return object_json

if __name__ == '__main__':
    (options, args) = parser.parse_args()
    thresholds = Thresholds(options)

    if options.item is None and options.thing is None:
        print('Item or Thing is mandatory.')
        sys.exit(RC_UNKN)

    if options.item is not None and options.thing is not None:
        print('Item and Thing cannot be combined.')
        sys.exit(RC_UNKN)

    if options.thing is not None and options.group is not None:
        print('Group functionality can only be used with item checks.')
        sys.exit(RC_UNKN)

    object_type = 'items' if options.item else 'things'
    object_name = options.item if options.item else options.thing

    object_url = '%s://%s:%d%s/%s/%s' % \
                 ('https' if options.ssl else 'http', options.hostname, options.port, options.base_url, object_type, object_name)
    object_json = fetch_object(object_url, options)

    if options.group:
        rc, messages, perfdata = check_group(object_json, thresholds, options)
        if len(messages) == 0:
            final_message = 'All group members within bounds.'
        elif len(messages) == 1:
            final_message = messages[0]
        else:
            final_message = '%d problems in group %s.\n%s' % (len(messages), object_json['name'], '\n'.join(messages))
        print(final_message + '|' + perfdata)
        sys.exit(rc)
    elif options.item:
        rc, message = check_item(object_json, thresholds, options)
        perfdata = ""
        try:
            state_float = float(i["state"])
            perfdata = ("|'%s'=%s" % (object_json["name"], object_json["state"]))
        except:
            # state isn't numeric, so don't add perfdata
            pass

        print((message + perfdata))
        sys.exit(rc)
    elif options.thing:
        rc, message = check_thing(object_json, options)
        print(message)
        sys.exit(rc)
